** 2025-09-09 15:26

Codex, you will take over this project from Claude Code. Investigate
it's contents and try to learn as much as possible about it. Describe
your findings here and if possible add them to your project memory.

** 2025-09-09 15:33

Fix the minor issues.

** 2025-09-09 15:34

Fix the remaining issues to your liking.

** 2025-09-09 15:37

Good, add, commit and push.

** 2025-09-09 15:49

Good. Add, commit and push. After trying make qa I notice that the
vulture tests isn't relevant at this stage in the project. Make them
optional and don't run them unless I tell you too. When that's done,
add, commit and push.

** 2025-09-09 15:55

Add a GitHub Actions workflow mirroring make ci.

** 2025-09-09 16:40

There was a failure in the CI run, I've downloaded logs and put them
in './logs_45111281811/'. Investigate and fix. If it's not a config
issue, create a test and iterate TDD-style on it untill it's
fixed. When done, add commit and push.

** 2025-09-09 17:46

The CI run failed again with this message:

  RequiredDependencyException: pangocairo >= 1.30.0 is required

Fix.

** 2025-09-09 18:54

Add a README note about the new QA split and how to enable manim
locally. Add, commit & push when done.

** 2025-09-09 18:55

Later. Imitate the Sphinx documentation procedure from
~/src/mine/stenkoll. Add, commit & push when done.

** 2025-09-09 19:02

Yes. Do both. Add, comitt and push when done.

** 2025-09-09 19:18

Can problems like the one we had with the CI pipeline just now be
avoided by installing a pre-commit hook? If so install one, then
commit and push when done.

** 2025-09-09 22:16

I see several failures when I run 'make qa'. Iterate and fix until all
of 'make qa' can run without errors or warnings.

** 2025-09-10 13:58

Implement a small CLI tool that will be used to perform reading/and
writing of ReMarkable notebooks in the future.

** 2025-09-10 14:08

Commit & push what you've done so far. I'm having trouble finding the
CLI on my commandline. I have activated the rmfiles venv, but it
doesn't seem there? If not, ensure that it's installed, then document
how to use it / find it. If needed add documents about the CLI in the
docs/decisions directory.  When done documenting, commit & push.

** 2025-09-10

Good, commit & push. Start developing a subpackage in rmfiles,
=rmfiles.rmdoc=, that should be able too read and write the =.rmdoc=
archive format. Read ./docs/decisions/0003-rmdoc-archive-format.rst if
you haven't already. Use a TDD methodology.

** 2025-09-10 15:21

Pin rmscene to the version we are using right now.

** 2025-09-10 15:30

Pin rmscene in CI as well. Commit & push when done.

** 2025-09-10 15:37

Yes, update docs.yml to install requirements.txt alongside QA deps to
future‑proof. Commit & push when done.

** 2025-09-10 16:25

Add, commmit & push. Then proceed too iterate on 'make qa' untill any
failures or warnings are fixed.

** 2025-09-10 16:40

Extend read capability too support layers.

** 2025-09-10 16:49

Expose layers in the CLI inspect (print layer count and names).

** 2025-09-10 20:51

No, leave lab.py as it is. Prepare a directory ./examples and place
python scripts inside it that creates:

  1. One .rm file with a triangle in it
  2. One with a rectangle in it
  3. One with a circle in it

The resulting .rm files should go in the ./output directory.

** 2025-09-10 21:54

Bring common functionallity from the three scripts
 examples/make_<shape>.py

Into the rmfiles package and generalize so that the example scripts
only will need to call simple convenience wrappers within the
=rmfiles= package.

** 2025-09-11 15:47

Time to streamline the API. Ultrathink and do a deep-dive how a
developer-friendly API for handling notebooks should look and how the
data structures that implements it should look behind the scenes.

Read Eric Normand's book "Grokking Simplicity" that you can find as a
text file locally here: ~/src/mine/stenkoll/grokking.txt. Hopefully
you can find inspiration on how the internals of a "Pythonic"
=rmfiles.Remarkablenotebook= object should look.

I suggest creating the object should look similar to this pattern:

#+BEGIN_SRC python
   from rmfiles import RemarkableNotebook

   # [...] other code
   notebook = RemarkableBotebook(<optional parameter, output path/path.Path object/file object>)
   # [...] the program uses the notebook object to draw
   notebook.write(<optional parameter, path/path.Path object/file object>)
   # The .write() method generates the .rm -file data and writes it to a .rm file
#+END_SRC

It looks like it already does. That brings us to the public-facing API
of =ReMarkableNotebook=:

Read this article:
https://spectrum.ieee.org/history-of-computer-graphics-industry about
historical computer graphics pioneers got the field of computer
graphics started. It should inform subsequent development about how
this step should be implemented.

Then look at how https://github.com/jorenham/numpy_turtle does it's
drawing. Then combine ideas from the numpy-turtle library with the
ReMarkable's different drawing tools. You should look at the file
=~/src/ext/rm/rmscene/src/rmscene/scene_items.py= that I have placed
on this computer. The API should be able to select an arbitrary
drawing tool before for every drawing primitive. It should also be
possible to create text nodes.

Set up an implementation plan and describe it when you are ready, then
well continue step by step.

If you think there are findings and/or parts of the implementation
plan that needs to be preserved for subsequent development steps,
write entries for them in =docs/decisions/=.

** 2025-09-11 18:28

Your questions:

  - Should push/pop include tool state or only position/heading/pen state? I
  propose include pen state; exclude tool by default to keep tool selection
  deliberate.

  It's probably good practice to include the tool state, but optional,
  then keep the last state and use it if a future call doesn't provide
  a pen state.
nn
  - Do you prefer deg=True by default to match numpy-turtle’s typical degree
  usage, or keep radians default like now? I propose default deg=False (radians),
  but happy to switch.

  Match numpy's degree usage for now.

Since we'll do it all, do one at a time but add/commit/push between
text/highlight support and the small example script.

** 2025-09-14 21:44

Sounds promising. Start implementing.

** 2025-09-15 14:33

Add the link from README.org to docs/quickstart.org.

** 2025-09-15 14:47

The example script =./examples/primitives_demo.py= didn't produce a
=.rm= file that was readable by the tablet. Some of the new primitives
could have broken the more low-level funtionallity that existed
before. Do a comprehensive and as thorough investigation as you can
and try to come up with what have gone wrong.

** 2025-09-15 17:52

Create a small script that re-generates all fixtures that the new
shape regression tests need. Create a make target that regenerates
them using the script.

** 2025-09-15 17:57

Change the fixture generation so that the stroke of the line widths
are 24 instead of 12.
